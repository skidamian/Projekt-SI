//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Renting.Ria.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The domain context corresponding to the 'RentingDomainService' domain service.
    /// </summary>
    public sealed partial class RentingDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RentingDomainContext"/> class.
        /// </summary>
        public RentingDomainContext() : 
                this(new WebDomainClient<IRentingDomainServiceContract>(new Uri("Renting-Ria-Web-RentingDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RentingDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The RentingDomainService service URI.</param>
        public RentingDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IRentingDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RentingDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public RentingDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="rezerwacje"/> entities that have been loaded into this <see cref="RentingDomainContext"/> instance.
        /// </summary>
        public EntitySet<rezerwacje> rezerwacjes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<rezerwacje>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="rezerwacje"/> entities using the 'GetRezerwacjes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="rezerwacje"/> entities.</returns>
        public EntityQuery<rezerwacje> GetRezerwacjesQuery()
        {
            this.ValidateMethod("GetRezerwacjesQuery", null);
            return base.CreateQuery<rezerwacje>("GetRezerwacjes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new RentingDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'RentingDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IRentingDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetRezerwacjes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RentingDomainService/GetRezerwacjesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RentingDomainService/GetRezerwacjes", ReplyAction="http://tempuri.org/RentingDomainService/GetRezerwacjesResponse")]
            [WebGet()]
            IAsyncResult BeginGetRezerwacjes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRezerwacjes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRezerwacjes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRezerwacjes' operation.</returns>
            QueryResult<rezerwacje> EndGetRezerwacjes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RentingDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RentingDomainService/SubmitChanges", ReplyAction="http://tempuri.org/RentingDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class RentingDomainContextEntityContainer : EntityContainer
        {
            
            public RentingDomainContextEntityContainer()
            {
                this.CreateEntitySet<rezerwacje>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'rezerwacje' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Renting.Ria.Web")]
    public sealed partial class rezerwacje : Entity
    {
        
        private DateTime _data_wypozyczenia;
        
        private Nullable<DateTime> _data_zwrotu;
        
        private int _id;
        
        private int _klient_id;
        
        private int _pracownik_id;
        
        private int _samochod_id;
        
        private string _status_;
        
        private string _uwagi;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Ondata_wypozyczeniaChanging(DateTime value);
        partial void Ondata_wypozyczeniaChanged();
        partial void Ondata_zwrotuChanging(Nullable<DateTime> value);
        partial void Ondata_zwrotuChanged();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void Onklient_idChanging(int value);
        partial void Onklient_idChanged();
        partial void Onpracownik_idChanging(int value);
        partial void Onpracownik_idChanged();
        partial void Onsamochod_idChanging(int value);
        partial void Onsamochod_idChanged();
        partial void Onstatus_Changing(string value);
        partial void Onstatus_Changed();
        partial void OnuwagiChanging(string value);
        partial void OnuwagiChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="rezerwacje"/> class.
        /// </summary>
        public rezerwacje()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'data_wypozyczenia' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime data_wypozyczenia
        {
            get
            {
                return this._data_wypozyczenia;
            }
            set
            {
                if ((this._data_wypozyczenia != value))
                {
                    this.Ondata_wypozyczeniaChanging(value);
                    this.RaiseDataMemberChanging("data_wypozyczenia");
                    this.ValidateProperty("data_wypozyczenia", value);
                    this._data_wypozyczenia = value;
                    this.RaiseDataMemberChanged("data_wypozyczenia");
                    this.Ondata_wypozyczeniaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'data_zwrotu' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<DateTime> data_zwrotu
        {
            get
            {
                return this._data_zwrotu;
            }
            set
            {
                if ((this._data_zwrotu != value))
                {
                    this.Ondata_zwrotuChanging(value);
                    this.RaiseDataMemberChanging("data_zwrotu");
                    this.ValidateProperty("data_zwrotu", value);
                    this._data_zwrotu = value;
                    this.RaiseDataMemberChanged("data_zwrotu");
                    this.Ondata_zwrotuChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'id' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.ValidateProperty("id", value);
                    this._id = value;
                    this.RaisePropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'klient_id' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public int klient_id
        {
            get
            {
                return this._klient_id;
            }
            set
            {
                if ((this._klient_id != value))
                {
                    this.Onklient_idChanging(value);
                    this.RaiseDataMemberChanging("klient_id");
                    this.ValidateProperty("klient_id", value);
                    this._klient_id = value;
                    this.RaiseDataMemberChanged("klient_id");
                    this.Onklient_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'pracownik_id' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public int pracownik_id
        {
            get
            {
                return this._pracownik_id;
            }
            set
            {
                if ((this._pracownik_id != value))
                {
                    this.Onpracownik_idChanging(value);
                    this.RaiseDataMemberChanging("pracownik_id");
                    this.ValidateProperty("pracownik_id", value);
                    this._pracownik_id = value;
                    this.RaiseDataMemberChanged("pracownik_id");
                    this.Onpracownik_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'samochod_id' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public int samochod_id
        {
            get
            {
                return this._samochod_id;
            }
            set
            {
                if ((this._samochod_id != value))
                {
                    this.Onsamochod_idChanging(value);
                    this.RaiseDataMemberChanging("samochod_id");
                    this.ValidateProperty("samochod_id", value);
                    this._samochod_id = value;
                    this.RaiseDataMemberChanged("samochod_id");
                    this.Onsamochod_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'status_' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string status_
        {
            get
            {
                return this._status_;
            }
            set
            {
                if ((this._status_ != value))
                {
                    this.Onstatus_Changing(value);
                    this.RaiseDataMemberChanging("status_");
                    this.ValidateProperty("status_", value);
                    this._status_ = value;
                    this.RaiseDataMemberChanged("status_");
                    this.Onstatus_Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'uwagi' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string uwagi
        {
            get
            {
                return this._uwagi;
            }
            set
            {
                if ((this._uwagi != value))
                {
                    this.OnuwagiChanging(value);
                    this.RaiseDataMemberChanging("uwagi");
                    this.ValidateProperty("uwagi", value);
                    this._uwagi = value;
                    this.RaiseDataMemberChanged("uwagi");
                    this.OnuwagiChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
